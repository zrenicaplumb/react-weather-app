{"ast":null,"code":"var _jsxFileName = \"/Users/brian/.nvm/react-app-1/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'; // // import App from './App';\n// // import * as serviceWorker from './serviceWorker';\n// // ReactDOM.render(<App />, document.getElementById('root'));\n// // // If you want your app to work offline and load faster, you can change\n// // // unregister() to register() below. Note this comes with some pitfalls.\n// // // Learn more about service workers: http://bit.ly/CRA-PWA\n// // serviceWorker.unregister();\n// function Square(props) {\n//     return (\n//       <button className=\"square\" onClick={props.onClick}>\n//         {props.value}\n//       </button>\n//     );\n//   }\n//   class Board extends React.Component {\n//     renderSquare(i) {\n//       return (\n//         <Square\n//           value={this.props.squares[i]}\n//           onClick={() => this.props.onClick(i)}\n//         />\n//       );\n//     }\n//     render() {\n//       return (\n//         <div>\n//           <div className=\"board-row\">\n//             {this.renderSquare(0)}\n//             {this.renderSquare(1)}\n//             {this.renderSquare(2)}\n//           </div>\n//           <div className=\"board-row\">\n//             {this.renderSquare(3)}\n//             {this.renderSquare(4)}\n//             {this.renderSquare(5)}\n//           </div>\n//           <div className=\"board-row\">\n//             {this.renderSquare(6)}\n//             {this.renderSquare(7)}\n//             {this.renderSquare(8)}\n//           </div>\n//         </div>\n//       );\n//     }\n//   }\n//   class Game extends React.Component {\n//     constructor(props) {\n//       super(props);\n//       this.state = {\n//         history: [\n//           {\n//             squares: Array(9).fill(null)\n//           }\n//         ],\n//         stepNumber: 0,\n//         xIsNext: true\n//       };\n//     }\n//     handleClick(i) {\n//       const history = this.state.history.slice(0, this.state.stepNumber + 1);\n//       const current = history[history.length - 1];\n//       const squares = current.squares.slice();\n//       if (calculateWinner(squares) || squares[i]) {\n//         return;\n//       }\n//       squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n//       this.setState({\n//         history: history.concat([\n//           {\n//             squares: squares\n//           }\n//         ]),\n//         stepNumber: history.length,\n//         xIsNext: !this.state.xIsNext\n//       });\n//     }\n//     jumpTo(step) {\n//       this.setState({\n//         stepNumber: step,\n//         xIsNext: (step % 2) === 0\n//       });\n//     }\n//     render() {\n//       const history = this.state.history;\n//       const current = history[this.state.stepNumber];\n//       const winner = calculateWinner(current.squares);\n//       const moves = history.map((step, move) => {\n//         const desc = move ?\n//           'Go to move #' + move :\n//           'Go to game start';\n//         return (\n//           <li key={move}>\n//             <button onClick={() => this.jumpTo(move)}>{desc}</button>\n//           </li>\n//         );\n//       });\n//       let status;\n//       if (winner) {\n//         status = \"Winner: \" + winner;\n//       } else {\n//         status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n//       }\n//       return (\n//         <div className=\"game\">\n//           <div className=\"game-board\">\n//             <Board\n//               squares={current.squares}\n//               onClick={i => this.handleClick(i)}\n//             />\n//           </div>\n//           <div className=\"game-info\">\n//             <div>{status}</div>\n//             <ol>{moves}</ol>\n//           </div>\n//         </div>\n//       );\n//     }\n//   }\n//   // ========================================\n//   ReactDOM.render(<Game />, document.getElementById(\"root\"));\n//   function calculateWinner(squares) {\n//     const lines = [\n//       [0, 1, 2],\n//       [3, 4, 5],\n//       [6, 7, 8],\n//       [0, 3, 6],\n//       [1, 4, 7],\n//       [2, 5, 8],\n//       [0, 4, 8],\n//       [2, 4, 6]\n//     ];\n//     for (let i = 0; i < lines.length; i++) {\n//       const [a, b, c] = lines[i];\n//       if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n//         return squares[a];\n//       }\n//     }\n//     return null;\n//   }\n\nReactDOM.render(React.createElement(StorePage, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 160\n  },\n  __self: this\n}), document.getElementById(\"root\"));","map":{"version":3,"sources":["/Users/brian/.nvm/react-app-1/src/index.js"],"names":["React","ReactDOM","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP,C,CACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGEA,QAAQ,CAACC,MAAT,CAAgB,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAA+BC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAA/B","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// // import App from './App';\n// // import * as serviceWorker from './serviceWorker';\n\n// // ReactDOM.render(<App />, document.getElementById('root'));\n\n// // // If you want your app to work offline and load faster, you can change\n// // // unregister() to register() below. Note this comes with some pitfalls.\n// // // Learn more about service workers: http://bit.ly/CRA-PWA\n// // serviceWorker.unregister();\n\n// function Square(props) {\n//     return (\n//       <button className=\"square\" onClick={props.onClick}>\n//         {props.value}\n//       </button>\n//     );\n//   }\n  \n//   class Board extends React.Component {\n//     renderSquare(i) {\n//       return (\n//         <Square\n//           value={this.props.squares[i]}\n//           onClick={() => this.props.onClick(i)}\n//         />\n//       );\n//     }\n  \n//     render() {\n//       return (\n//         <div>\n//           <div className=\"board-row\">\n//             {this.renderSquare(0)}\n//             {this.renderSquare(1)}\n//             {this.renderSquare(2)}\n//           </div>\n//           <div className=\"board-row\">\n//             {this.renderSquare(3)}\n//             {this.renderSquare(4)}\n//             {this.renderSquare(5)}\n//           </div>\n//           <div className=\"board-row\">\n//             {this.renderSquare(6)}\n//             {this.renderSquare(7)}\n//             {this.renderSquare(8)}\n//           </div>\n//         </div>\n//       );\n//     }\n//   }\n  \n//   class Game extends React.Component {\n//     constructor(props) {\n//       super(props);\n//       this.state = {\n//         history: [\n//           {\n//             squares: Array(9).fill(null)\n//           }\n//         ],\n//         stepNumber: 0,\n//         xIsNext: true\n//       };\n//     }\n  \n//     handleClick(i) {\n//       const history = this.state.history.slice(0, this.state.stepNumber + 1);\n//       const current = history[history.length - 1];\n//       const squares = current.squares.slice();\n//       if (calculateWinner(squares) || squares[i]) {\n//         return;\n//       }\n//       squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n//       this.setState({\n//         history: history.concat([\n//           {\n//             squares: squares\n//           }\n//         ]),\n//         stepNumber: history.length,\n//         xIsNext: !this.state.xIsNext\n//       });\n//     }\n  \n//     jumpTo(step) {\n//       this.setState({\n//         stepNumber: step,\n//         xIsNext: (step % 2) === 0\n//       });\n//     }\n  \n//     render() {\n//       const history = this.state.history;\n//       const current = history[this.state.stepNumber];\n//       const winner = calculateWinner(current.squares);\n  \n//       const moves = history.map((step, move) => {\n//         const desc = move ?\n//           'Go to move #' + move :\n//           'Go to game start';\n//         return (\n//           <li key={move}>\n//             <button onClick={() => this.jumpTo(move)}>{desc}</button>\n//           </li>\n//         );\n//       });\n  \n//       let status;\n//       if (winner) {\n//         status = \"Winner: \" + winner;\n//       } else {\n//         status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n//       }\n  \n//       return (\n//         <div className=\"game\">\n//           <div className=\"game-board\">\n//             <Board\n//               squares={current.squares}\n//               onClick={i => this.handleClick(i)}\n//             />\n//           </div>\n//           <div className=\"game-info\">\n//             <div>{status}</div>\n//             <ol>{moves}</ol>\n//           </div>\n//         </div>\n//       );\n//     }\n//   }\n  \n//   // ========================================\n  \n//   ReactDOM.render(<Game />, document.getElementById(\"root\"));\n  \n//   function calculateWinner(squares) {\n//     const lines = [\n//       [0, 1, 2],\n//       [3, 4, 5],\n//       [6, 7, 8],\n//       [0, 3, 6],\n//       [1, 4, 7],\n//       [2, 5, 8],\n//       [0, 4, 8],\n//       [2, 4, 6]\n//     ];\n//     for (let i = 0; i < lines.length; i++) {\n//       const [a, b, c] = lines[i];\n//       if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n//         return squares[a];\n//       }\n//     }\n//     return null;\n//   }\n  \n\n  ReactDOM.render(<StorePage />, document.getElementById(\"root\"));"]},"metadata":{},"sourceType":"module"}